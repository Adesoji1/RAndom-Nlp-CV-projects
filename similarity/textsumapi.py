# from flask import Flask, request
# from summarization_model import summarize

# app = Flask(__name__)

# @app.route('/summarize', methods=['POST'])
# def summarize_text():
#   input_text = request.json['text']
#   summary = summarize(input_text)
#   return {'summary': summary}

# if __name__ == '__main__':
#   app.run()



"""
To create a text summarization API endpoint using PyTorch, you would need to first train a text summarization model using PyTorch. You can do this by following these steps:

Gather a large dataset of text documents and their corresponding summaries. This dataset will be used to train the model.

Preprocess the text data by cleaning it, tokenizing it, and converting it into numerical vectors.

Define the architecture of the summarization model using PyTorch. This could be a recurrent neural network (RNN) or a transformer network.

Train the model on the dataset using an appropriate loss function and optimizer.

Once the model is trained, you can create an API endpoint that accepts text inputs and returns the corresponding summaries generated by the model.

Here is an example of how the API endpoint might be implemented using PyTorch and Flask:

This is a high-level outline of how to create a text summarization API endpoint using PyTorch. There are many details and nuances involved in training and deploying a text summarization model, so it's important to do thorough research and testing before implementing a production-ready system.
"""

# Import the necessary libraries
import torch
from flask import Flask, request

# Initialize the Flask app and the PyTorch model
app = Flask(__name__)
model = torch.load("summarization_model.pt")

# Define the API endpoint
@app.route("/summarize", methods=["POST"])
def summarize():
    # Get the text to be summarized from the request
    text = request.json["text"]

    # Preprocess the text
    preprocessed_text = preprocess(text)

    # Convert the text into numerical vectors
    input_vectors = vectorize(preprocessed_text)

    # Use the model to generate a summary
    summary = model(input_vectors)

    # Return the summary in the response
    return {"summary": summary}
